[config]
default_to_workspace = false

# Run the RAW SQS consumer connected to the test queue in test mode
[tasks.raw-consumer-local]
env = { "RUST_LOG" = "info" }
command = "cargo"
args = [
    "run",
    "--bin",
    "consumer",
    "--",
    "--mode",
    "raw",
    "--local"
]

# Run the DECODED SQS consumer connected to the test queue in test mode
[tasks.decoded-consumer-local]
env = { "RUST_LOG" = "info" }
command = "cargo"
args = [
    "run",
    "--bin",
    "consumer",
    "--",
    "--mode",
    "decoded",
    "--local"
]

# Run the RESOLVER SQS consumer connected to the test queue in test mode
[tasks.resolver-consumer-local]
env = { "RUST_LOG" = "info" }
command = "cargo"
args = [
    "run",
    "--bin",
    "consumer",
    "--",
    "--mode",
    "resolver",
    "--local"
]

# Remove docker volumes
[tasks.remove-docker-volumes]
command = "docker"
args = ["compose", "down", "-v"]

# Start the docker compose stack
[tasks.start-docker]
command = "docker"
args = ["compose", "up", "-d", "--force-recreate"]

# Build the docker image for the hasura migrations
[tasks.build-image-hasura-migrations]
command = "docker"
args = ["build", "-t", "ghcr.io/0xintuition/hasura-migrations:latest", "-f", "hasura/Dockerfile", "."]

# Migrate the database
[tasks.migrate-database]
command = "hasura"
args = ["deploy", "--project", "hasura"]

# This task remove the docker volumes, start the docker compose stack, and migrate the database
[tasks.start-docker-and-migrate]
dependencies = ["remove-docker-volumes", "build-image-substreams-sink", "build-docker", "build-image-guard-docker", "build-image-hasura-migrations", "start-docker"]

[tasks.restart]
dependencies = ["remove-docker-volumes", "start-docker"]

# Run the RAW SQS consumer connected to the real SQS queue
[tasks.raw-consumer]
env = { "RUST_LOG" = "info" }
command = "cargo"
args = [
    "run",
    "--bin",
    "consumer",
    "--",
    "--mode",
    "raw",
]

# Run the SQS consumer connected to the real SQS queue
[tasks.decoded-consumer]
env = { "RUST_LOG" = "info" }
command = "cargo"
args = [
    "run",
    "--bin",
    "consumer",
    "--",
    "--mode",
    "decoded",
]

# Run the SQS consumer connected to the real SQS queue
[tasks.resolver-consumer]
env = { "RUST_LOG" = "info" }
command = "cargo"
args = [
    "run",
    "--bin",
    "consumer",
    "--",
    "--mode",
    "resolver",
]

# Build the docker image for the consumer service
[tasks.build-docker]
command = "docker"
args = ["build", "-t", "ghcr.io/0xintuition/consumer:latest", "-f", "consumer/Dockerfile", "."]

# Build the docker image for the api service
[tasks.build-image-guard-docker]
command = "docker"
args = ["build", "-t", "ghcr.io/0xintuition/image-guard:latest", "-f", "image-guard/Dockerfile", "."]


# Simply format and lint checking with `cargo clippy` for all targets
# in the workspace, promoting `warnings` to `errors`
[tasks.clippy]
command = "cargo"
args = ["clippy", "--all-features", "--all-targets", "--workspace", "--", "-Dwarnings"]


# Build the docker image for the substreams sink
[tasks.build-image-substreams-sink]
command = "docker"
args = ["build", "-t", "ghcr.io/0xintuition/substreams-sink:latest", "-f", "substreams-sink/Dockerfile", "."]
