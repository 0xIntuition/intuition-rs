apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose-kompose.yml
    kompose.version: 1.34.0 (HEAD)
  labels:
    io.kompose.service: resolver-consumer
  name: resolver-consumer
spec:
  replicas: 2
  selector:
    matchLabels:
      io.kompose.service: resolver-consumer
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose-kompose.yml
        kompose.version: 1.34.0 (HEAD)
      labels:
        io.kompose.service: resolver-consumer
    spec:
      securityContext:
        runAsUser: 0
        runAsGroup: 0
      containers:
        - args:
            - ./consumer
            - --mode
            - resolver
            - --local
          env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_REGION
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: AWS_REGION
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: AWS_SECRET_ACCESS_KEY
            - name: CONSUMER_TYPE
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: CONSUMER_TYPE
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: DATABASE_URL
            - name: ENS_CONTRACT_ADDRESS
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: ENS_CONTRACT_ADDRESS
            - name: IMAGE_GUARD_URL
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: IMAGE_GUARD_URL
            - name: IPFS_GATEWAY_URL
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: IPFS_GATEWAY_URL
            - name: IPFS_UPLOAD_QUEUE_URL
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: IPFS_UPLOAD_QUEUE_URL
            - name: IPFS_UPLOAD_URL
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: IPFS_UPLOAD_URL
            - name: LOCALSTACK_URL
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: LOCALSTACK_URL
            - name: PINATA_API_JWT
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: PINATA_API_JWT
            - name: PINATA_GATEWAY_TOKEN
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: PINATA_GATEWAY_TOKEN
            - name: RESOLVER_QUEUE_URL
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: RESOLVER_QUEUE_URL
            - name: RPC_URL_BASE_MAINNET
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: RPC_URL_BASE_MAINNET
            - name: RPC_URL_MAINNET
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: RPC_URL_MAINNET
            - name: RUST_LOG
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: RUST_LOG
          image: ghcr.io/0xintuition/consumer:latest
          name: resolver-consumer
          ports:
            - containerPort: 8001
              protocol: TCP
          securityContext:
            runAsUser: 0
            runAsGroup: 0
          volumeMounts:
            - mountPath: /var/log/app
              name: resolver-logs
      restartPolicy: Always
      volumes:
        - name: resolver-logs
          persistentVolumeClaim:
            claimName: resolver-logs
